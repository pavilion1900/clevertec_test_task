plugins {
    id 'java'
    id "io.freefair.lombok" version "6.5.1"
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'

}

apply from: "dep_versions.gradle"

sourceSets {
    jmh {
        java.srcDirs = ['src/jmh/java']
        resources.srcDirs = ['src/jmh/resources']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

repositories {
    mavenCentral()
}

dependencies {
    jmhImplementation "org.openjdk.jmh:jmh-core:${versions.jmh}"
    jmhAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${versions.jmh}"

    implementation "com.itextpdf:itext7-core:${versions.itext7}"

    implementation "org.mapstruct:mapstruct:${versions.mapstruct}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${versions.mapstruct}"

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

group = 'ru.clevertec'
version = '1.0-SNAPSHOT'
description = 'clevertec_test_task'
java.sourceCompatibility = JavaVersion.VERSION_14

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes "Main-Class": "ru.clevertec.Application"
    }
}

task jmh(type: JavaExec, dependsOn: jmhClasses) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}

// to make sure benchmarks always get compiled
classes.finalizedBy(jmhClasses)

test {
    useJUnitPlatform()
}
